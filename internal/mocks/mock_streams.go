// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mongodb/atlas-cli-plugin-kubernetes/internal/store (interfaces: StreamsLister,StreamsConnectionLister)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	admin "go.mongodb.org/atlas-sdk/v20241113004/admin"
)

// MockStreamsLister is a mock of StreamsLister interface.
type MockStreamsLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsListerMockRecorder
}

// MockStreamsListerMockRecorder is the mock recorder for MockStreamsLister.
type MockStreamsListerMockRecorder struct {
	mock *MockStreamsLister
}

// NewMockStreamsLister creates a new mock instance.
func NewMockStreamsLister(ctrl *gomock.Controller) *MockStreamsLister {
	mock := &MockStreamsLister{ctrl: ctrl}
	mock.recorder = &MockStreamsListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsLister) EXPECT() *MockStreamsListerMockRecorder {
	return m.recorder
}

// ProjectStreams mocks base method.
func (m *MockStreamsLister) ProjectStreams(arg0 string) ([]admin.StreamsTenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectStreams", arg0)
	ret0, _ := ret[0].([]admin.StreamsTenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProjectStreams indicates an expected call of ProjectStreams.
func (mr *MockStreamsListerMockRecorder) ProjectStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectStreams", reflect.TypeOf((*MockStreamsLister)(nil).ProjectStreams), arg0)
}

// MockStreamsConnectionLister is a mock of StreamsConnectionLister interface.
type MockStreamsConnectionLister struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsConnectionListerMockRecorder
}

// MockStreamsConnectionListerMockRecorder is the mock recorder for MockStreamsConnectionLister.
type MockStreamsConnectionListerMockRecorder struct {
	mock *MockStreamsConnectionLister
}

// NewMockStreamsConnectionLister creates a new mock instance.
func NewMockStreamsConnectionLister(ctrl *gomock.Controller) *MockStreamsConnectionLister {
	mock := &MockStreamsConnectionLister{ctrl: ctrl}
	mock.recorder = &MockStreamsConnectionListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsConnectionLister) EXPECT() *MockStreamsConnectionListerMockRecorder {
	return m.recorder
}

// StreamsConnections mocks base method.
func (m *MockStreamsConnectionLister) StreamsConnections(arg0, arg1 string) (*admin.PaginatedApiStreamsConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamsConnections", arg0, arg1)
	ret0, _ := ret[0].(*admin.PaginatedApiStreamsConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamsConnections indicates an expected call of StreamsConnections.
func (mr *MockStreamsConnectionListerMockRecorder) StreamsConnections(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamsConnections", reflect.TypeOf((*MockStreamsConnectionLister)(nil).StreamsConnections), arg0, arg1)
}
