# Copyright 2025 MongoDB Inc
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

exec_timeout_secs: 4200 # automatically fail any task if it takes longer than 1h10m to finish.
stepback: true
command_type: system
pre_error_fails_task: true
include:
  - filename: build/ci/release.yml

variables:
  - &go_linux_version
      go_root: "/opt/golang/go1.24"
      go_bin: "/opt/golang/go1.24/bin"
      go_base_path: ""
  - &go_env
      XDG_CONFIG_HOME: ${go_base_path}${workdir}
      GO111MODULE: "on"
      GOROOT: ${go_root}
      GOPATH: ${go_base_path}${workdir}
      ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/atlas-cli-plugin-kubernetes/bin"
      GOPROXY: ${go_proxy}
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/atlas-cli-plugin-kubernetes/bin
    include_expansions_in_env:
      - go_base_path
      - go_proxy
      - workdir
    working_dir: src/github.com/mongodb/atlas-cli-plugin-kubernetes
    env:
      <<: *go_env
pre:
  - func: "clone"
  - func: "set-expansions"
post:
  - command: attach.xunit_results
    params:
      files: ["src/github.com/mongodb/atlas-cli-plugin-kubernetes/*.xml"]
functions:
  "clone":
    - command: git.get_project
      type: setup
      params:
        directory: src/github.com/mongodb/atlas-cli-plugin-kubernetes
  "build":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        command: make build
  "check purls":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        binary: make
        args: 
        - generate-purls
    - command: subprocess.exec
      params:
        <<: *go_options
        include_expansions_in_env:
          - workdir
        binary: build/ci/check-purls.sh
  "e2e test":
    - command: subprocess.exec
      type: test
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - workdir
          - ATLAS_TEST_ENV
          - QA_MCLI_ORG_ID
          - QA_MCLI_PRIVATE_API_KEY
          - QA_MCLI_PUBLIC_API_KEY
          - QA_MCLI_OPS_MANAGER_URL
          - MCLI_ORG_ID
          - MCLI_PRIVATE_API_KEY
          - MCLI_PUBLIC_API_KEY
          - MCLI_SERVICE
          - TEST_CMD
          - E2E_RUN_PATTERN
          - MCLI_OPS_MANAGER_URL
          - OM_VERSION
          - LOCAL_KEY
          - KMIP_CA
          - KMIP_CERT
          - E2E_TIMEOUT
          - E2E_PARALLEL
          - revision
          - AWS_ACCOUNT_ID
          - AWS_ACCESS_KEY_ID
          - AWS_SECRET_ACCESS_KEY
          - AZURE_SUBSCRIPTION_ID
          - AZURE_TENANT_ID
          - AZURE_RESOURCE_GROUP_NAME
          - AZURE_CLIENT_ID
          - AZURE_CLIENT_SECRET
          - GOOGLE_PROJECT_ID
          - GCP_SA_CRED
        env:
          <<: *go_env
          MCLI_SKIP_UPDATE_CHECK: "yes"
          DO_NOT_TRACK: "1"
          TEST_CMD: gotestsum --junitfile e2e-tests.xml --format standard-verbose --
        command: make e2e-test
  "install gotestsum":
    - command: shell.exec
      type: setup
      params:
        <<: *go_options
        working_dir: src/github.com/mongodb/atlas-cli-plugin-kubernetes/bin
        shell: bash
        script: |
          set -Eeou pipefail
          export PATH="$ADD_PATH:$PATH"
          if [[ "$(uname -s)" == "Darwin"* ]]; then
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_darwin_arm64.tar.gz
          else
            URL=https://github.com/gotestyourself/gotestsum/releases/download/v${gotestsum_ver}/gotestsum_${gotestsum_ver}_linux_amd64.tar.gz
          fi
          curl -sfL $URL | tar zx
  "ssh":
    - command: subprocess.exec
      params:
        binary: ssh
        args:
          - -o
          - StrictHostKeyChecking=no
          - -i "${identity_file}"
          - "${user}@${host}"
          - ${cmd}
  "ssh-ready":
    - command: shell.exec
      params:
        exec_as_string: true
        script: |
          attempts=0
          connection_attempts=${connection_attempts|25}
          ## Check for remote connectivity
          while ! ssh \
            -i "${identity_file}" \
            -o ConnectTimeout=10 \
            -o ForwardAgent=yes \
            -o IdentitiesOnly=yes \
            -o StrictHostKeyChecking=no \
            "${user}@${host}" \
            exit
          do
            [ "$attempts" -ge "$connection_attempts" ] && exit 1
            ((attempts++))
            printf "SSH connection attempt %d/%d failed. Retrying...\n" "$attempts" "$connection_attempts"
            ## sleep for Permission denied (publickey) errors
            sleep 10
          done
        shell: bash
  "set-expansions":
    - command: shell.exec
      params:
        <<: *go_options
        shell: bash
        script: |
          set -Eeou pipefail
          cat <<EOF > expansions.yaml
          home: $HOME
          tag: $(git tag --list 'v*' --sort=-taggerdate | head -1)
          version: $(git tag --list 'v*' --sort=-taggerdate | head -1 | cut -d 'v' -f 2)
          EOF
    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/github.com/mongodb/atlas-cli-plugin-kubernetes/expansions.yaml
    - command: subprocess.exec
      params:
        <<: *go_options
        binary: rm
        args:
          - -f
          - expansions.yaml
  "otel":
    - command: subprocess.exec
      params:
        <<: *go_options
        include_expansions_in_env:
          - go_base_path
          - go_proxy
          - workdir
          - project_id
          - project_identifier
          - otel_trace_id
          - otel_parent_id
          - otel_collector_endpoint
        env:
          <<: *go_env
          SPAN: ${span}
          ATTRS: ${attr}
        binary: make
        args:
          - otel
tasks:
  - name: compile
    tags: ["code_health"]
    commands:
      - func: "build"
  - name: check_purls
    tags: ["code_health"]
    commands:
      - func: "check purls"
  - name: binary_e2e
    tags: ["e2e","required"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - command: shell.exec
        type: test
        params:
          <<: *go_options
          shell: bash
          script: |
            set -Eeou pipefail
            mkdir "$XDG_CONFIG_HOME/atlascli"
            cat <<EOF > "$XDG_CONFIG_HOME/atlascli/config.toml"
            [e2e]
              org_id = "5e429e7706822c6eac4d5971"
              public_api_key = "AAUMGJXA"
              service = "cloud"
            EOF
      - func: "e2e test"
        vars:
          ATLAS_TEST_ENV: ${atlas_test_env} # "QA" activates the switch, anything else fallbacks to DEV
          QA_MCLI_ORG_ID: ${qa_atlas_org_id}
          QA_MCLI_PRIVATE_API_KEY: ${qa_atlas_private_api_key}
          QA_MCLI_PUBLIC_API_KEY: ${qa_atlas_public_api_key}
          QA_MCLI_OPS_MANAGER_URL: ${qa_mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          AWS_ACCOUNT_ID: ${aws_account_id}
          AWS_ACCESS_KEY_ID: ${aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: ${aws_secret_access_key}
          AZURE_SUBSCRIPTION_ID: ${azure_subscription_id}
          AZURE_TENANT_ID: ${azure_tenant_id}
          AZURE_RESOURCE_GROUP_NAME: ${azure_resource_group_name}
          AZURE_CLIENT_ID: ${azure_client_id}
          AZURE_CLIENT_SECRET: ${azure_client_secret}
          GOOGLE_PROJECT_ID: ${google_project_id}
          GCP_SA_CRED: ${gcp_sa_cred}
          E2E_RUN_PATTERN: TestKubernetesPluginBinary
  - name: atlas_kubernetes_generate_e2e
    tags: ["e2e","required","kubernetes", "assigned_to_jira_team_cloudp_kubernetes_atlas"]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          ATLAS_TEST_ENV: ${atlas_test_env} # "QA" activates the switch, anything else fallbacks to DEV
          QA_MCLI_ORG_ID: ${qa_atlas_org_id}
          QA_MCLI_PRIVATE_API_KEY: ${qa_atlas_private_api_key}
          QA_MCLI_PUBLIC_API_KEY: ${qa_atlas_public_api_key}
          QA_MCLI_OPS_MANAGER_URL: ${qa_mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          AWS_ACCOUNT_ID: ${aws_account_id}
          AWS_ACCESS_KEY_ID: ${aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: ${aws_secret_access_key}
          AZURE_SUBSCRIPTION_ID: ${azure_subscription_id}
          AZURE_TENANT_ID: ${azure_tenant_id}
          AZURE_RESOURCE_GROUP_NAME: ${azure_resource_group_name}
          AZURE_CLIENT_ID: ${azure_client_id}
          AZURE_CLIENT_SECRET: ${azure_client_secret}
          GOOGLE_PROJECT_ID: ${google_project_id}
          GCP_SA_CRED: ${gcp_sa_cred}
          E2E_RUN_PATTERN: TestExport.*|TestGenerate.*|TestProject.*|TestFederatedAuthTest|TestEmptyProject|TestKubernetesConfigGenerate.*
  - name: atlas_kubernetes_apply_e2e
    tags: [ "e2e","required","kubernetes", "assigned_to_jira_team_cloudp_kubernetes_atlas" ]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          ATLAS_TEST_ENV: ${atlas_test_env} # "QA" activates the switch, anything else fallbacks to DEV
          QA_MCLI_ORG_ID: ${qa_atlas_org_id}
          QA_MCLI_PRIVATE_API_KEY: ${qa_atlas_private_api_key}
          QA_MCLI_PUBLIC_API_KEY: ${qa_atlas_public_api_key}
          QA_MCLI_OPS_MANAGER_URL: ${qa_mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          AWS_ACCOUNT_ID: ${aws_account_id}
          AWS_ACCESS_KEY_ID: ${aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: ${aws_secret_access_key}
          AZURE_SUBSCRIPTION_ID: ${azure_subscription_id}
          AZURE_TENANT_ID: ${azure_tenant_id}
          AZURE_RESOURCE_GROUP_NAME: ${azure_resource_group_name}
          AZURE_CLIENT_ID: ${azure_client_id}
          AZURE_CLIENT_SECRET: ${azure_client_secret}
          GOOGLE_PROJECT_ID: ${google_project_id}
          GCP_SA_CRED: ${gcp_sa_cred}
          E2E_RUN_PATTERN: TestKubernetesConfigApply.*
  - name: atlas_kubernetes_install_e2e
    tags: [ "e2e","required","kubernetes", "assigned_to_jira_team_cloudp_kubernetes_atlas" ]
    must_have_test_results: true
    commands:
      - func: "install gotestsum"
      - func: "e2e test"
        vars:
          ATLAS_TEST_ENV: ${atlas_test_env} # "QA" activates the switch, anything else fallbacks to DEV
          QA_MCLI_ORG_ID: ${qa_atlas_org_id}
          QA_MCLI_PRIVATE_API_KEY: ${qa_atlas_private_api_key}
          QA_MCLI_PUBLIC_API_KEY: ${qa_atlas_public_api_key}
          QA_MCLI_OPS_MANAGER_URL: ${qa_mcli_ops_manager_url}
          MCLI_ORG_ID: ${atlas_org_id}
          MCLI_PRIVATE_API_KEY: ${atlas_private_api_key}
          MCLI_PUBLIC_API_KEY: ${atlas_public_api_key}
          MCLI_OPS_MANAGER_URL: ${mcli_ops_manager_url}
          MCLI_SERVICE: cloud
          AWS_ACCOUNT_ID: ${aws_account_id}
          AWS_ACCESS_KEY_ID: ${aws_access_key_id}
          AWS_SECRET_ACCESS_KEY: ${aws_secret_access_key}
          AZURE_SUBSCRIPTION_ID: ${azure_subscription_id}
          AZURE_TENANT_ID: ${azure_tenant_id}
          AZURE_RESOURCE_GROUP_NAME: ${azure_resource_group_name}
          AZURE_CLIENT_ID: ${azure_client_id}
          AZURE_CLIENT_SECRET: ${azure_client_secret}
          GOOGLE_PROJECT_ID: ${google_project_id}
          GCP_SA_CRED: ${gcp_sa_cred}
          E2E_RUN_PATTERN: TestKubernetesOperatorInstall
buildvariants:
  - name: code_health
    display_name: "Code Health"
    run_on:
      - rhel80-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: .code_health
  - name: e2e_required
    display_name: "E2E Tests Required"
    run_on:
      - ubuntu2204-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: ".e2e .required"
github_pr_aliases:
  - variant: "code_health"
    task_tags: ["code_health"]
  - variant: "e2e_required"
    task_tags: ["e2e", "required"]
git_tag_aliases:
  - git_tag: "v*"
    variant: "^release"
    task: ".*"
github_checks_aliases:
 - variant: ".*"
   task: ".*"
